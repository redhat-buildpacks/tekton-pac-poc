---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: buildpacks
  annotations:
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    pipelinesascode.tekton.dev/task: "git-clone"
    pipelinesascode.tekton.dev/task-1: "buildpacks"
    pipelinesascode.tekton.dev/task-2: "maven"
    pipelinesascode.tekton.dev/task-3: "kubernetes-actions"

    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    #- name: USER_ID
    #  description: The user ID of the builder image user.
    #  default: "1000"
    #- name: GROUP_ID
    #  description: The group ID of the builder image user.
    #  default: "0"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      #- name: USER_ID
      #- name: GROUP_ID
    workspaces:
      - name: source
      - name: basic-auth
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      - name: list-files-workspace-1
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: backup-git
              image: docker.io/library/bash:5.1.4
              script: |
                #!/usr/bin/env bash
                #echo "> Setting permissions on '$(workspaces.source.path)'..."
                #chown -R "1000:0" "$(workspaces.source.path)"
                
                echo "> Creating a temp folder to copy the git code source"
                #mkdir -p "$(workspaces.source.path)"/temp
                #cp -R "$(workspaces.source.path)"/* "$(workspaces.source.path)"/temp/
        runAfter:
          - fetch-repository
      - name: buildpacks
        taskRef:
          name: buildpacks
        runAfter:
          - fetch-repository
        params:
          - name: APP_IMAGE
            value: ttl.sh/c04768cb-2012-4280-990d-a9adf51c7462:2h
          - name: BUILDER_IMAGE
            # value: codejive/buildpacks-quarkus-builder
            value: gcr.io/paketo-buildpacks/builder:base
          - name: ENV_VARS
            value:
              - "BP_NATIVE_IMAGE=false"
              - "BP_MAVEN_BUILT_ARTIFACT=func.yaml target/quarkus-app/lib/ target/quarkus-app/*.jar target/quarkus-app/app/ target/quarkus-app/quarkus/"
              - "BP_MAVEN_BUILD_ARGUMENTS=package -DskipTests=true -Dmaven.javadoc.skip=true -Dquarkus.package.type=fast-jar"
        workspaces:
          - name: source
            workspace: source
      - name: list-files-workspace-2
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - image: bash:latest
              script: |
                #!/usr/bin/env bash
                set -e
                
                ls -la /
                ls -la /workspace/ || true
                ls -la /workspace/source/ || true
                ls -la /workspace/output/ || true
        runAfter:
          - buildpacks
      - name: package
        taskRef:
          name: maven
        runAfter:
          - buildpacks
        params:
          - name: GOALS
            value:
              - -Dmaven.repo.local=$(workspaces.source.path)
              - clean
              - package
        workspaces:
          - name: source
            workspace: source
          - name: maven-settings
            workspace: maven-settings
      - name: deploy-k8s
        taskRef:
          name: kubernetes-actions
        runAfter:
          - package
        params:
          - name: script
            value: |
              kubectl apply -f ./k8s/kubernetes.yml
        workspaces:
          - name: manifest-dir
            workspace: source
      - name: integration
        taskRef:
          name: maven
        runAfter:
          - deploy-k8s
        params:
          - name: GOALS
            value:
              - -Pkubernetes
              - clean
              - verify
        workspaces:
          - name: source
            workspace: source
          - name: maven-settings
            workspace: maven-settings
    finally:
      - name: undeploy-k8s
        taskRef:
          name: kubernetes-actions
        params:
          - name: script
            value: |
              kubectl delete -f ./k8s/kubernetes.yml
        workspaces:
          - name: manifest-dir
            workspace: source
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
    - name: maven-settings
      emptyDir: {}